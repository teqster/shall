#
# mocking commands by setting up aliases to mock functions
#
# only works if you call commands without abosulte paths... :(
#

#
# create a command mock
#
mock()
{
    cmd="$1"
    target="$2"
    _SHALL_MOCKS="$_SHAL_MOCKS$target "
    if type "$target" 2>/dev/null|grep -q 'is a function'; then
        MOCK_FUNC="$(echo -e "$cmd()\n{\n$target \$@\n}")"
    else
        unset "$cmd"
        MOCK_FUNC="$(echo -e "$cmd()\n{\n$target\n}")"
    fi

    WHICH=$(which $cmd)
    ORIG_FUNC="$(echo -e "orig_$cmd()\n{\n$WHICH \$@\n}")"
    _SHALL_MOCKS="$_SHAL_MOCKS$orig_cmd "
    eval "$ORIG_FUNC"
    eval "$MOCK_FUNC"
}

#
# remove all created mocks
#
_unmock_all()
{
    for m in $_SHALL_MOCKS; do
      unset $m
    done
    _SHALL_MOCKS=''
}


#
# running a single test and doing bookkeeping
#
_runTest()
{
    func="$1"
    echo -n "Running $func.. "
    if "$func"; then
        echo ok
        let _SHALL_OK++
    else
        echo fail
        let _SHALL_FAIL++
        _SHALL_FAIL_NAMES="$_SHALL_FAIL_NAMES$func "
    fi
}

#
# runs all tests defined as function with 'test_' as function name prefix
#
testRun()
{
    _SHALL_FAIL=0
    _SHALL_FAIL_NAMES=''
    _SHALL_OK=0
    for f in $(declare -F|cut -d\  -f3-|grep '^test_'|sort); do
        _runTest "$f"
    done
    let SHALL_ALL=$_SHALL_OK+$_SHALL_FAIL
    echo "Results: $SHALL_ALL test(s), $_SHALL_OK succeeded, $_SHALL_FAIL failed."
    test $_SHALL_FAIL -eq 0 || echo "Failing tests: $_SHALL_FAIL_NAMES"
    test $_SHALL_FAIL -eq 0
}

#
# helper functions
#

assertOK()
{
    eval "$*"
}

assertFail()
{
    eval "$*"
    _SHALL_RET=$?
    test $_SHALL_RET -ne 0
}

# vi:ts=4:st=4:et:ai:
