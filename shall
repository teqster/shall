#
# mocking commands by setting up aliases to mock functions
#
# only works if you call commands without abosulte paths... :(
#

#
# function to globally apply mocks
#
_setupMocks()
{
    _SHALL_MOCKS=''
    for f in $(declare -F|cut -d\  -f3-|grep '^mock_'|sort); do
        mocked="${f#mock_}"
        _SHALL_MOCKS="$_SHALL_MOCKS$mocked "
        MOCK_FUNC="$(echo -e "$mocked()\n{\n$f \$@\n}")"
        eval "$MOCK_FUNC"
    done
}

#
# restore original commands after testing
#
_cleanupMocks()
{
    for m in $_SHALL_MOCKS; do
      unset $m
    done
    _SHALL_MOCKS=''
}

#
# running a single test and doing bookkeeping
#
_runTest()
{
    func="$1"
    echo -n "Running $func.. "
    if "$func"; then
        echo ok
        let _SHALL_OK++
    else
        echo fail
        let _SHALL_FAIL++
        _SHALL_FAIL_NAMES="$_SHALL_FAIL_NAMES$func "
    fi
}

#
# runs all tests defined as function with 'test_' as function name prefix
#
testRun()
{
    _SHALL_FAIL=0
    _SHALL_FAIL_NAMES=''
    _SHALL_OK=0
    _setupMocks
    for f in $(declare -F|cut -d\  -f3-|grep '^test_'|sort); do
        _runTest "$f"
    done
    _cleanupMocks
    let SHALL_ALL=$_SHALL_OK+$_SHALL_FAIL
    echo "Results: $SHALL_ALL test(s), $_SHALL_OK succeeded, $_SHALL_FAIL failed."
    echo "Failing tests: $_SHALL_FAIL_NAMES"
    test $_SHALL_FAIL -eq 0
}

#
# helper functions
#

assertOK()
{
    eval "$*"
}

assertFail()
{
    eval "$*" || true
}

# vi:ts=4:st=4:et:ai:
